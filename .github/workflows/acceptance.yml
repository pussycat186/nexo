name: Acceptance Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  acceptance:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Detect package manager
        id: pm
        run: |
          if [ -f pnpm-lock.yaml ]; then
            echo "mgr=pnpm" >> $GITHUB_OUTPUT
            echo "install=pnpm install --frozen-lockfile" >> $GITHUB_OUTPUT
            echo "has_pnpm=1" >> $GITHUB_OUTPUT
          elif [ -f yarn.lock ]; then
            echo "mgr=yarn" >> $GITHUB_OUTPUT
            echo "install=yarn install --frozen-lockfile" >> $GITHUB_OUTPUT
          else
            echo "mgr=npm" >> $GITHUB_OUTPUT
            echo "install=npm ci" >> $GITHUB_OUTPUT
          fi

      - name: Setup PNPM if needed
        if: steps.pm.outputs.has_pnpm == '1'
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install deps
        run: ${{ steps.pm.outputs.install }}

      - name: Start API server (node dist || npx tsx)
        env:
          PORT: 5000
          NODE_ENV: production
          JWT_SECRET: ci_secret_only
          JWT_ISSUER: nexo
        run: |
          set -e
          # chạy build nếu có script, nhưng không fail nếu không có
          (npm run build || pnpm build || yarn build || true) >/dev/null 2>&1 || true

          # chạy server; ghi log ra file
          (node dist/index.js || npx --yes tsx server/index.ts) > server.log 2>&1 &
          echo $! > server.pid
          echo "PID=$(cat server.pid)"

          # readiness: đợi /api/health tối đa 60 lần (1s)
          ok=0
          for i in {1..60}; do
            if curl -sf http://localhost:5000/api/health >/dev/null ; then
              ok=1; break
            fi
            sleep 1
          done
          if [ "$ok" != "1" ]; then
            echo "==== server.log (tail) ===="
            tail -n 200 server.log || true
            echo "==== server.log (full if small) ===="
            wc -c server.log; [ $(wc -c < server.log) -lt 200000 ] && cat server.log || true
            exit 1
          fi
          echo "Server is healthy."

      - name: Health performance (5 samples <200ms)
        run: |
          for i in {1..3}; do curl -s http://localhost:5000/api/health >/dev/null; done
          fail=0
          for i in {1..5}; do
            t=$(curl -s -w "%{time_total}" -o /dev/null http://localhost:5000/api/health)
            ms=$(python -c "print(int(float('$t')*1000))")
            echo "Sample $i: ${ms}ms"
            [ $ms -gt 200 ] && fail=1
          done
          if [ $fail -ne 0 ]; then
            echo "Health too slow (>200ms)"; exit 1
          fi

      - name: Prove SQLite fallback by log banner (non-fatal)
        run: |
          if grep -Ei "Using SQLite database at .*data/nexo\.db" server.log ; then
            echo "SQLite fallback banner found."
          else
            echo "WARN: SQLite banner not found (may be DATABASE_URL set)."
          fi

      - name: Tail logs on failure
        if: failure()
        run: |
          echo "==== server.log (last 200 lines) ===="
          tail -n 200 server.log || true
