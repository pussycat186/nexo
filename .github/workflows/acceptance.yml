name: Acceptance Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  acceptance:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Detect package manager
        id: detect-pm
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
            echo "cache=pnpm" >> $GITHUB_OUTPUT
            echo "install_cmd=pnpm install --frozen-lockfile" >> $GITHUB_OUTPUT
          elif [ -f "yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "cache=yarn" >> $GITHUB_OUTPUT
            echo "install_cmd=yarn install --frozen-lockfile" >> $GITHUB_OUTPUT
          else
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "cache=npm" >> $GITHUB_OUTPUT
            echo "install_cmd=npm ci" >> $GITHUB_OUTPUT
          fi
          
      - name: Setup PNPM (if needed)
        if: steps.detect-pm.outputs.manager == 'pnpm'
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.pnpm-store
            ~/.yarn/cache
            node_modules
          key: ${{ runner.os }}-${{ steps.detect-pm.outputs.cache }}-${{ hashFiles('**/package-lock.json', '**/pnpm-lock.yaml', '**/yarn.lock') }}
          
      - name: Install dependencies
        run: ${{ steps.detect-pm.outputs.install_cmd }}
        
      - name: Start server robustly
        env:
          PORT: 5000
          JWT_SECRET: test_secret_for_ci_only_do_not_use_in_production
          JWT_ISSUER: nexo
          NODE_ENV: production
        run: |
          export PORT=5000
          # robust start: build if possible, then fall back to tsx
          (pnpm -v && pnpm build) || true
          (node dist/index.js || npx tsx server/index.ts) &> server.log &
          # wait until health is up
          for i in {1..40}; do curl -sf localhost:5000/api/health && break || sleep 0.5; done
        shell: bash
          
      - name: Test health endpoint performance
        run: |
          # warm-up + 5 samples (<200ms each)
          for i in {1..3}; do curl -s localhost:5000/api/health >/dev/null; done
          FAIL=0
          for i in {1..5}; do
            T=$(curl -s -w "%{time_total}" -o /dev/null localhost:5000/api/health)
            ms=$(python - <<PY
t=float("$T"); print(int(t*1000))
PY
)
            echo "health_ms=$ms"
            [ "$ms" -lt 200 ] || FAIL=1
          done
          exit $FAIL
        shell: bash
          
      - name: Verify SQLite database creation
        run: |
          # try to force DB write so SQLite file is created
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST localhost:5000/api/messages \
            -H "Content-Type: application/json" \
            -d '{"conversation_id":"ci-acc","cipher":"X1","nonce":"N1","ad":{"type":"text"}}')
          echo "messages_post_status=$STATUS"  # acceptable even if endpoint not present
          sleep 0.5
          ls -lh ./data || true
          test -f ./data/nexo.db
        shell: bash
          
      - name: Run E2E tests (if available)
        run: |
          if [ "${{ steps.detect-pm.outputs.manager }}" = "pnpm" ]; then
            if pnpm run | grep -q "test:e2e"; then
              echo "Running E2E tests..."
              pnpm test:e2e
            else
              echo "No test:e2e script found - skipping"
            fi
          elif [ "${{ steps.detect-pm.outputs.manager }}" = "yarn" ]; then
            if yarn run | grep -q "test:e2e"; then
              echo "Running E2E tests..."
              yarn test:e2e
            else
              echo "No test:e2e script found - skipping"
            fi
          else
            if npm run | grep -q "test:e2e"; then
              echo "Running E2E tests..."
              npm run test:e2e
            else
              echo "No test:e2e script found - skipping"
            fi
          fi
          
      - name: Stop server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi