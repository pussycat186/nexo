name: Acceptance Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  acceptance:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Detect package manager
        id: detect-pm
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
            echo "cache=pnpm" >> $GITHUB_OUTPUT
            echo "install_cmd=pnpm install --frozen-lockfile" >> $GITHUB_OUTPUT
          elif [ -f "yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "cache=yarn" >> $GITHUB_OUTPUT
            echo "install_cmd=yarn install --frozen-lockfile" >> $GITHUB_OUTPUT
          else
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "cache=npm" >> $GITHUB_OUTPUT
            echo "install_cmd=npm ci" >> $GITHUB_OUTPUT
          fi
          
      - name: Setup PNPM (if needed)
        if: steps.detect-pm.outputs.manager == 'pnpm'
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.pnpm-store
            ~/.yarn/cache
            node_modules
          key: ${{ runner.os }}-${{ steps.detect-pm.outputs.cache }}-${{ hashFiles('**/package-lock.json', '**/pnpm-lock.yaml', '**/yarn.lock') }}
          
      - name: Install dependencies
        run: ${{ steps.detect-pm.outputs.install_cmd }}
        
      - name: Build application
        run: |
          if [ "${{ steps.detect-pm.outputs.manager }}" = "pnpm" ]; then
            pnpm run build
          elif [ "${{ steps.detect-pm.outputs.manager }}" = "yarn" ]; then
            yarn build
          else
            npm run build
          fi
          
      - name: Start API server
        env:
          PORT: 5000
          JWT_SECRET: test_secret_for_ci_only_do_not_use_in_production
          JWT_ISSUER: nexo
          NODE_ENV: production
        run: |
          if [ "${{ steps.detect-pm.outputs.manager }}" = "pnpm" ]; then
            pnpm start &
          elif [ "${{ steps.detect-pm.outputs.manager }}" = "yarn" ]; then
            yarn start &
          else
            npm start &
          fi
          echo $! > server.pid
          
      - name: Wait for server to be ready
        run: |
          echo "Waiting for server to start..."
          for i in {1..30}; do
            if curl -s http://localhost:5000/api/health > /dev/null; then
              echo "Server is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Server failed to start within 30 seconds"
              exit 1
            fi
            sleep 1
          done
          
      - name: Warm up server
        run: |
          echo "Warming up server..."
          for i in {1..3}; do
            curl -s http://localhost:5000/api/health > /dev/null
            sleep 0.5
          done
          
      - name: Test health endpoint performance
        run: |
          echo "Testing health endpoint performance (must be < 200ms)..."
          FAILED=0
          for i in {1..5}; do
            TIME=$(curl -s -o /dev/null -w "%{time_total}" http://localhost:5000/api/health)
            TIME_MS=$(echo "$TIME * 1000" | bc | cut -d. -f1)
            echo "Attempt $i: ${TIME_MS}ms"
            if [ "$TIME_MS" -ge 200 ]; then
              echo "❌ FAILED: Response time ${TIME_MS}ms >= 200ms limit"
              FAILED=1
            else
              echo "✅ PASS: Response time ${TIME_MS}ms < 200ms"
            fi
            sleep 0.5
          done
          if [ $FAILED -eq 1 ]; then
            echo "Performance test failed: at least one response exceeded 200ms"
            exit 1
          fi
          
      - name: Check messages endpoint
        run: |
          echo "Checking if /api/messages endpoint exists..."
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X OPTIONS http://localhost:5000/api/messages)
          if [ "$STATUS" = "204" ] || [ "$STATUS" = "200" ]; then
            echo "Messages endpoint available (status: $STATUS)"
            
            # Get initial STH count
            INITIAL_STH=$(curl -s http://localhost:5000/api/sth | jq -r '.current_index // 0')
            echo "Initial STH index: $INITIAL_STH"
            
            # Send 3 test messages
            for i in {1..3}; do
              echo "Sending test message $i..."
              curl -s -X POST http://localhost:5000/api/messages \
                -H "Content-Type: application/json" \
                -d "{\"content\":\"Test message $i\",\"timestamp\":$(date +%s)000}" \
                || echo "Note: Message send may require authentication"
              sleep 0.5
            done
            
            # Check if STH count increased
            FINAL_STH=$(curl -s http://localhost:5000/api/sth | jq -r '.current_index // 0')
            echo "Final STH index: $FINAL_STH"
            
            if [ "$FINAL_STH" -gt "$INITIAL_STH" ]; then
              echo "✅ STH count increased from $INITIAL_STH to $FINAL_STH"
            else
              echo "Note: STH count unchanged (may require authenticated messages)"
            fi
          else
            echo "Messages endpoint not available (status: $STATUS) - skipping message tests"
          fi
          
      - name: Verify SQLite database
        run: |
          echo "Checking for SQLite database file..."
          if [ -f ./data/nexo.db ]; then
            echo "✅ SQLite database exists at ./data/nexo.db"
            ls -la ./data/nexo.db
          else
            echo "Note: SQLite database not found (app may be using PostgreSQL or different path)"
            ls -la ./data 2>/dev/null || echo "No data directory"
          fi
          
      - name: Run E2E tests (if available)
        run: |
          if [ "${{ steps.detect-pm.outputs.manager }}" = "pnpm" ]; then
            if pnpm run | grep -q "test:e2e"; then
              echo "Running E2E tests..."
              pnpm test:e2e
            else
              echo "No test:e2e script found - skipping"
            fi
          elif [ "${{ steps.detect-pm.outputs.manager }}" = "yarn" ]; then
            if yarn run | grep -q "test:e2e"; then
              echo "Running E2E tests..."
              yarn test:e2e
            else
              echo "No test:e2e script found - skipping"
            fi
          else
            if npm run | grep -q "test:e2e"; then
              echo "Running E2E tests..."
              npm run test:e2e
            else
              echo "No test:e2e script found - skipping"
            fi
          fi
          
      - name: Stop server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi