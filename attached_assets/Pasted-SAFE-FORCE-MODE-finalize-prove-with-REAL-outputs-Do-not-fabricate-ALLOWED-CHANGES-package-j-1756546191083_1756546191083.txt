SAFE FORCE MODE — finalize & prove with REAL outputs. Do not fabricate.

ALLOWED CHANGES
- package.json "scripts" (add/fix start/build fallback)
- tsconfig.json (if missing; minimal)
- server/db-storage.ts (mkdir for ./data)
- server/routes.ts (ONLY if /api/health still hits DB; add fast-path counter)
- Meta files already created (.github/*, README, RUNBOOK, SECURITY, .env.example, .gitignore, LICENSE)

DO NOT touch secrets or other runtime logic.

OBJECTIVES (must all pass)
1) `pnpm start` must work (no “Cannot find module dist/index.js”).
2) With DATABASE_URL UNSET, app uses SQLite; `./data/nexo.db` is created.
3) /api/health < 200ms after warm-up (5/5 samples).
4) Paste RAW outputs and first 30 lines of key files.

STEPS (run exactly; paste outputs as blocks):
1) Show scripts:
   - Print first 30 lines of package.json. Ensure scripts include:
     "dev": "tsx server/index.ts",
     "build": "tsc -p tsconfig.json || true",
     "start": "NODE_ENV=production node dist/index.js || tsx server/index.ts"
   - If tsconfig.json missing, create minimal and paste first 30 lines.

2) Ensure mkdir for SQLite:
   - In server/db-storage.ts, before opening ./data/nexo.db, ensure:
     import fs from 'node:fs'; import path from 'node:path';
     const dbPath = path.resolve('./data/nexo.db');
     fs.mkdirSync(path.dirname(dbPath), { recursive: true });
   - Paste the modified snippet (10–15 lines).

3) Health fast-path (only if it previously queried DB):
   - Paste the health handler snippet (10–20 lines).

4) REAL RUN (SQLite default):
   - Run and paste command + raw outputs:
     pkill -f node || true
     unset DATABASE_URL
     export PORT=5000
     pnpm build
     pnpm start & sleep 3
     # warm-up
     for i in 1 2 3; do curl -s http://localhost:5000/api/health >/dev/null; done
     echo "--- 5 health samples ---"
     for i in 1 2 3 4 5; do curl -s -o /dev/null -w "status:%{http_code} time:%{time_total}\n" http://localhost:5000/api/health; done
     echo "--- data dir ---"
     ls -lh ./data || true
     [ -f ./data/nexo.db ] && echo "--- PRAGMA ---" && sqlite3 ./data/nexo.db "PRAGMA integrity_check;" || echo "db not created yet"
   - If /api/messages exists, send 3 messages and show health JSON (sth_count increased).

5) Show acceptance workflow header:
   - Print the first 40 lines of .github/workflows/acceptance.yml

PASS CRITERIA (ALL required)
- 5 health samples: each < 0.2s
- ./data/nexo.db exists; PRAGMA = ok (if sqlite3 available; otherwise file exists is fine)
- pnpm start runs successfully
- Only allowed files changed

COMMIT (only if pass)
- Stage: package.json, tsconfig.json (if new), server/db-storage.ts (and routes.ts if edited), plus meta files previously created
- Verify: git status --porcelain (only allowed paths)
- Commit: `chore(repo): fix start fallback, ensure SQLite default, prove health <200ms`
- Print final push commands for the user
STOP if any step fails; print TODO without committing.
