Operate in SAFE MODE. Do not modify runtime application code or secrets. Only create/modify repository *meta* files listed in the WHITELIST. If any assumption is false, STOP and report; do not “fix” app code.

GOAL
Prepare the repo for GitHub: docs + CI acceptance gate + templates. Non-destructive. Idempotent (safe to re-run).

ASSUMPTIONS (must be verified, not invented)
- Node 20+ is available.
- API already exposes GET /api/health. 
- API *may* expose POST /api/messages for a smoke send; if absent, skip message sending test and note “messages endpoint missing”.
- Default port is 5000.
- When DATABASE_URL is UNSET, the app should use SQLite at ./data/nexo.db. Do NOT create this DB file yourself; only assert its existence after the server starts.

GUARDRAILS
- WHITELIST of files you may change/create:
  README.md
  .gitignore
  .env.example
  RUNBOOK.md
  SECURITY.md
  LICENSE
  .github/workflows/acceptance.yml
  .github/pull_request_template.md
  .github/ISSUE_TEMPLATE/bug_report.md
  .github/ISSUE_TEMPLATE/feature_request.md
  .github/CODEOWNERS

- DO NOT rename/move/delete any existing source files or folders.
- DO NOT touch package.json dependencies or scripts unless absolutely required to start the server; if required, append new scripts without removing existing ones and explain the change.
- DO NOT commit binaries, databases, or .env.
- Commit MUST include only WHITELIST files (verify with `git status --porcelain` before committing).

TASKS
1) Write/refresh docs:
   - README.md (project summary, features: Ed25519 passwordless, X25519+XChaCha20-Poly1305, WS ACK/idempotency, STH, receipts/TTL, SQLite-by-default + Postgres optional), layout, quick start, env.
   - SECURITY.md (disclosure email placeholder, crypto overview, headers/rate-limit).
   - RUNBOOK.md (start with SQLite, env vars, health check, troubleshooting: health>200ms and WS duplicates).
   - LICENSE (MIT) if missing.
   - .env.example (PORT=5000, JWT_ISSUER=nexo, JWT_SECRET=change_me, commented DATABASE_URL).

2) Git hygiene:
   - .gitignore for node_modules, dist/build, .cache, apps/web/.vite, data/, *.db/*.sqlite, .env*, logs, OS junk.

3) CI acceptance gate:
   - .github/workflows/acceptance.yml that:
     * checkout + Node 20 + package manager detection (pnpm if lockfile exists else npm/yarn).
     * start API with DATABASE_URL UNSET; wait until /api/health is 200.
     * warm-up x3, then sample 5 times; **fail if any** sample >= 200ms (real timing via curl %time_total).
     * If /api/messages exists (probe with OPTIONS/HEAD/GET to /api), send 3 messages via POST and then call /api/health; assert a monotonic counter (sth_count or equivalent) increases. If endpoint absent, print “messages endpoint not available” and **do not fail**.
     * assert `test -f ./data/nexo.db` (only after the server starts).
     * run `pnpm test:e2e` or `npm run test:e2e` **if script exists**; otherwise print note and continue.

4) PR & Issue templates:
   - .github/pull_request_template.md with “Acceptance Evidence” checklist (HEALTH<200ms, SQLite default proof, revoke→401+WS4401, WS no-dup with DB count=1, edit/delete rules, key rotation @20, TTL purge, STH verify).
   - simple bug_report.md & feature_request.md.
   - .github/CODEOWNERS with `* @pussycat186`.

SELF-CHECK (must be real, no placeholders)
- Print node -v and the package manager chosen.
- Start API locally with DATABASE_URL UNSET; call `curl -s -o /dev/null -w "status:%{http_code} time:%{time_total}\n" http://localhost:5000/api/health` and show the line.
- If the server starts, list `ls -la ./data || true` (do not create the DB yourself).
- If /api/messages exists, print which endpoint you used and the response code after one test POST.

COMMIT
- Stage only WHITELIST files. Abort if `git status` shows any path outside WHITELIST.
- Commit message: `chore(repo): add docs, CI acceptance gate, templates, and git hygiene`
- Print a final summary and the exact git commands for the user to push.

OUTPUT FORMAT
1) “Created/Updated files:” list
2) For each new file: first 30 lines
3) Self-check outputs (the real curl timing + directory listing)
4) `git status --porcelain` to prove only WHITELIST files are staged

If any verification fails, STOP and print a short TODO list instead of guessing.
